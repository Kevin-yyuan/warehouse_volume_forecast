import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from prophet.plot import plot_plotly
from statsmodels.tsa.seasonal import seasonal_decompose

# --- Page Configuration ---
# Sets the title of the browser tab and the layout of the page. "wide" uses the full screen width.
st.set_page_config(page_title="Warehouse Volume Forecast", layout="wide")

# --- Title and Description ---
st.title("ðŸ“¦ Warehouse Volume Forecast App")
st.write("""
This app generates a 4-week forecast for warehouse container volume.
It uses historical data and Facebook's Prophet time-series model to predict future volume,
helping managers with operational planning.
""")

# --- Data Loading and Caching ---
# @st.cache_data tells Streamlit to run this function only once and cache the result.
# This prevents reloading the data from the CSV every time the user interacts with the app.


@st.cache_data
def load_data():
    """Loads, cleans, and resamples the warehouse volume data."""
    df = pd.read_csv('warehouse_daily_volume.csv')
    df['date'] = pd.to_datetime(df['date'])
    df.set_index('date', inplace=True)
    # Resample daily data to weekly frequency by summing up the volumes for each week.
    df_weekly = df['volume'].resample('W').sum().to_frame()
    return df_weekly


df_weekly = load_data()

# --- Exploratory Data Analysis (EDA) Section ---
st.header("1. Exploratory Data Analysis")

st.subheader("Weekly Container Volume Data (First 5 Weeks)")

# Use columns to center the dataframe for better visual presentation.
# The middle column (col2) is twice as wide as the side columns (col1, col3).
col1, col2, col3 = st.columns([1, 2, 1])

with col2:
    # Display the dataframe with custom column configurations for a cleaner look.
    st.dataframe(
        df_weekly.head(),
        column_config={
            # Format the index 'date' column to show only the date part.
            "date": st.column_config.DatetimeColumn(
                "Date",  # Sets a user-friendly display name for the column.
                format="YYYY-MM-DD",
            ),
            # Configure the 'volume' column.
            "volume": st.column_config.NumberColumn(
                "Weekly Volume",  # Sets a user-friendly display name.
                width="small",   # Makes the column width smaller.
            ),
        }
    )

# Plot the full raw data time series.
st.subheader("Weekly Volume Time Series")
fig_ts, ax = plt.subplots(figsize=(12, 6))
df_weekly['volume'].plot(ax=ax)
ax.set_title('Total Weekly Warehouse Container Volume')
ax.set_ylabel('Container Volume')
ax.grid(True)
st.pyplot(fig_ts)

# Decompose the time series into trend, seasonal, and residual components.
st.subheader("Time Series Decomposition")
decomposition = seasonal_decompose(
    df_weekly['volume'], model='additive', period=52)
# We display the plot generated by statsmodels.
st.pyplot(decomposition.plot())


# --- Forecasting Section ---
st.header("2. Volume Forecast for the Next 4 Weeks")

# A button to trigger the model training and forecasting process.
if st.button("ðŸš€ Generate Forecast"):
    # A spinner to show the user that the app is busy.
    with st.spinner("Training model and generating forecast... This may take a moment."):
        # Prepare data for Prophet: requires 'ds' and 'y' columns.
        df_prophet = df_weekly.reset_index().rename(
            columns={'date': 'ds', 'volume': 'y'})

        # Instantiate and fit the Prophet model.
        model = Prophet(yearly_seasonality=True)
        model.fit(df_prophet)

        # Create a future dataframe for the next 4 weeks and predict.
        future = model.make_future_dataframe(periods=4, freq='W')
        forecast = model.predict(future)

        # --- Display Results ---
        st.subheader("Forecast Plot")
        # Use Prophet's interactive plotting with Plotly for a better user experience.
        fig_forecast = plot_plotly(model, forecast)
        fig_forecast.update_layout(
            title="4-Week Volume Forecast with Uncertainty Intervals",
            xaxis_title="Date",
            yaxis_title="Container Volume"
        )
        st.plotly_chart(fig_forecast, use_container_width=True)

        st.subheader("Forecast Data (Next 4 Weeks)")
        # Display the forecasted values in a table, showing only the future predictions.
        st.dataframe(
            forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(4))

        st.success("Forecast generated successfully!")
